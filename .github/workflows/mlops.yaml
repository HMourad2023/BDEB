name: CI/CD for Streamlit App

on:
  push:
    branches:
      - main

jobs:
  run:
    runs-on: ubuntu-latest  # Utilisation de l'image Ubuntu fournie par GitHub Actions

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Utiliser la dernière version de l'action

      - name: Update system libraries
        run: |
          sudo apt-get update
          sudo apt-get install --only-upgrade openssl

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Installation des dépendances Python

      - name: Create DVC Google Drive configuration file
        run: |
          echo "{
            \"auth_uri\": \"${{ secrets.AUTH_URI }}\",
            \"auth_provider_x509_cert_url\": \"${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}\",
            \"client_id\": \"${{ secrets.CLIENT_ID }}\",
            \"client_secret\": \"${{ secrets.CLIENT_SECRET }}\",
            \"project_id\": \"${{ secrets.PROJECT_ID }}\",
            \"token_uri\": \"${{ secrets.TOKEN_URI }}\"
          }" > gdrive_service_account.json

      - name: Check Google Drive configuration file
        run: |
          cat gdrive_service_account.json  # Vérifiez le contenu du fichier JSON

      - name: Configure DVC remote for Google Drive
        run: |
          dvc remote modify myremote gdrive_service_account_json_file_path ../gdrive_service_account.json  # Configuration du remote DVC

      - name: Pull DVC data
        run: |
          dvc fetch  # Extraction des données depuis Google Drive

      - name: Run DVC pipeline
        run: |
          dvc repro  # Exécution du pipeline DVC

      - name: Set up MLflow
        run: |
          pip install mlflow  # Installation de MLflow
          mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./mlruns &  # Lancement du serveur MLflow localement

      - name: Train and log models
        run: |
          python src/components/train_and_log_model.py  # Exécution du script pour entraîner les modèles et les enregistrer dans MLflow

      - name: Register the best model
        env:
          MLFLOW_TRACKING_URI: "http://127.0.0.1:5000"  # URI du serveur MLflow
        run: |
          python src/register_best_model.py  # Script pour enregistrer le meilleur modèle dans le registre MLflow

    #   - name: Deploy to Streamlit Cloud
    #     env:
    #       STREAMLIT_APP_URL: ${{ secrets.STREAMLIT_APP_URL }}
    #       STREAMLIT_API_KEY: ${{ secrets.STREAMLIT_API_KEY }}
    #     run: |
    #       curl -X POST "https://api.streamlit.io/v1/deployments" \
    #         -H "Authorization: Bearer $STREAMLIT_API_KEY" \
    #         -H "Content-Type: application/json" \
    #         -d '{"app_url": "$STREAMLIT_APP_URL"}'

    #   - name: Clean up
    #     run: |
    #       rm gdrive_service_account.json  # Nettoyage du fichier temporaire
